 Co-orelated Subquery questions(With Self joins):
 
  create multiset volatile table emp
 (
 emp_id INTEGER,
 dept_id INTEGER,
 salary DECIMAL(18,2)
 )
 primary index(emp_id) ON COMMIT PRESERVE ROWS;
 
insert into emp values (1, 101, 2000);
insert into emp values (2, 102, 5000);
insert into emp values (3, 103, 7500);
insert into emp values (4, 102, 17500);
insert into emp values (5, 103, 10100);
insert into emp values (7, 103, 18000);
insert into emp values (6, 101, 980);

 
 --1. Normal Subquery(First Example) - Employee with Salary greater than avg of all departments:
 
select e.emp_id, e.salary from emp e where salary > (select avg(salary) from emp e1);

 *** Query completed. 3 rows found. 2 columns returned. 
 *** Total elapsed time was 1 second.

     emp_id                salary
-----------  --------------------
          4              17500.00
          5              10100.00
          7              18000.00
 
 --2. Correlated Subquery(First Example) - Employee with Salary greater than avg of own departments:
 
select e.emp_id, e.salary from emp e where salary > (select avg(salary) from emp e1 where e1.dept_id = e.dept_id);

 *** Query completed. 3 rows found. 2 columns returned. 
 *** Total elapsed time was 1 second.

     emp_id                salary
-----------  --------------------
          4              17500.00
          7              18000.00
          1               2000.00
          
--3: Max salary for each department:

select e.emp_id, e.salary from emp e where salary =  
(select max(salary) AS salary from emp e1 where e1.dept_id = e.dept_id);

 *** Query completed. 3 rows found. 2 columns returned. 
 *** Total elapsed time was 1 second.

     emp_id                salary
-----------  --------------------
          1               2000.00
          4              17500.00
          5              10100.00

--4: Min salary for each department:

select e.emp_id, e.salary from emp e where salary =  
(select min(salary) AS salary from emp e1 where e1.dept_id = e.dept_id);


 *** Query completed. 3 rows found. 2 columns returned. 
 *** Total elapsed time was 1 second.

     emp_id                salary
-----------  --------------------
          6                980.00
          3               7500.00
          2               5000.00

--5. Top 3 salaries:

select e.emp_id, e.salary from emp e 
qualify row_number() over (order by e.salary desc) <=3;

 *** Query completed. 3 rows found. 2 columns returned. 
 *** Total elapsed time was 1 second.

     emp_id                salary
-----------  --------------------
          7              18000.00
          4              17500.00
          5              10100.00 

--6: Top N Salary:

3rd Top Salary:

select e.emp_id, e.salary from emp e where 2 = (select count(*) from emp e1 where e1.salary > e.salary);

OR

select e.emp_id, e.salary from emp e qualify row_number() over (order by e.salary desc) =3;

 *** Query completed. One row found. 2 columns returned. 
 *** Total elapsed time was 1 second.

     emp_id                salary
-----------  --------------------
          5              10100.00

--Mysql:

select e.emp_id, e.salary from emp e order by salary desc limit 2, 1;
